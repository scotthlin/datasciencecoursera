<<<<<<< HEAD
=======
ToothGrowth$supp == "VC" && ToothGrowth$dose == 0.5
ToothGrowth$supp == "VC" && ToothGrowth$dose == 2.0
ToothGrowth$supp == "VC" & ToothGrowth$dose == 2.0
ToothGrowth[ToothGrowthsupp$ == "VC" & ToothGrowth$dose == 1.0]
ToothGrowth[ToothGrowthsupp$ == "VC" & ToothGrowth$dose == 1.0,]
ToothGrowth[ToothGrowth$supp == "VC" & ToothGrowth$dose == 1.0,]
ToothGrowth[ToothGrowth$supp == "VC" & ToothGrowth$dose == 1.0, "len"]
?sapply
?unlist
unique(ToothGrowth$supp)
unique(ToothGrowth$dose)
?data.frame
data.frame(2, 4)
uniquesupp <- unique(ToothGrowth$supp)
uniquedose <- unique(ToothGrowth$dose)
data.frame(row.names = uniquesupp, col.names = uniquedose)
data.frame(VC = NULL, OJ = NULL)
data.frame(VC = uniquedose, OJ = uniquedose)
?matri
?matrix
matrix(, nrow = 6, ncol = 6, dimnames = split(ToothGrowth[2+3], ToothGrowth[2]))
split(ToothGrowth, ToothGrowth[2])
split(ToothGrowth[1], ToothGrowth[2], ToothGrowth[3])
split(ToothGrowth[2]+ToothGrowth[3], ToothGrowth[2])
split(paste(ToothGrowth[2],ToothGrowth[3], sep = " "), ToothGrowth[2])
ToothGrowth[2]
paste(ToothGrowth[2], ToothGrowth[3], sep = " ")
paste(ToothGrowth[2], ToothGrowth[3])
ToothGrowth[3]
paste(ToothGrowth[2], as.string(ToothGrowth[3]))
?as
?as.character
?as.string
str(ToothGrowth)
str(c("hello"))
paste(ToothGrowth[2], as.character(ToothGrowth[3]))
ToothGrowth[2]
ToothValue$supp
ToothGrowth$supp
paste(ToothGrowth$supp, ToothGrowth$dose)
test <- data.frame(paste(ToothGrowth$supp, ToothGrowth$dose), ToothGrowth$len)
test
test <- data.frame(combined = paste(ToothGrowth$supp, ToothGrowth$dose), ToothGrowth)
test
plot(test$Combined, test$len)
test$Combined
test$combined
plot(test$combined, test$len)
library(datasets)
data(ToothGrowth)
CToothGrowth <- data.frame(combined = paste(ToothGrowth$supp, ToothGrowth$dose), ToothGrowth)
plot(CToothGrowth)
?plot
plot(CToothGrowth[1], CToothGrowth[2])
head(CToothGrowth)
plot(CToothGrowth$combined, CToothGrowth$len)
t.test(CToothGrowth[CToothGrowth$supp == VC & CToothGrowth$dose = 0.5] ~ CToothGrowth[CToothGrowth$supp == VC & CToothGrowth$dose = 1.0])
t.test(CToothGrowth[CToothGrowth$supp == VC & CToothGrowth$dose == 0.5] ~ CToothGrowth[CToothGrowth$supp == VC & CToothGrowth$dose == 1.0])
t.test(CToothGrowth[CToothGrowth$supp == "VC" & CToothGrowth$dose == 0.5] ~ CToothGrowth[CToothGrowth$supp == "VC" & CToothGrowth$dose == 1.0])
str(CToothGrowth)
t.test(CToothGrowth[CToothGrowth$supp == "VC" & CToothGrowth$dose == 0.5, CToothGrowth$len] ~ CToothGrowth[CToothGrowth$supp == "VC" & CToothGrowth$dose == 1.0, CToothGrowth$len])
CToothGrowth[CToothGrowth$supp == "VC" & CToothGrowth$dose == 0.5, CToothGrowth$len]
CToothGrowth[CToothGrowth$supp == "VC" & CToothGrowth$dose == 0.5, "len"]
t.test(CToothGrowth[CToothGrowth$supp == "VC" & CToothGrowth$dose == 0.5, "len" ~ CToothGrowth[CToothGrowth$supp == "VC" & CToothGrowth$dose == 1.0, "len"])
t.test(CToothGrowth[CToothGrowth$supp == "VC" & CToothGrowth$dose == 0.5, "len") ~ CToothGrowth[CToothGrowth$supp == "VC" & CToothGrowth$dose == 1.0, "len"])
t.test(CToothGrowth[CToothGrowth$supp == "VC" & CToothGrowth$dose == 0.5, "len"] ~ CToothGrowth[CToothGrowth$supp == "VC" & CToothGrowth$dose == 1.0, "len"])
?t.test
CToothGrowth[CToothGrowth$supp == "VC" & CToothGrowth$dose == 0.5, "len"]
CToothGrowth[CToothGrowth$supp == "VC" & CToothGrowth$dose == 1.0, "len"]
t.test(CToothGrowth[CToothGrowth$supp == "VC" & CToothGrowth$dose == 0.5, "len"], CToothGrowth[CToothGrowth$supp == "VC" & CToothGrowth$dose == 1.0, "len"], alternative = "greater")
t.test(CToothGrowth[CToothGrowth$supp == "VC" & CToothGrowth$dose == 1.0, "len"], CToothGrowth[CToothGrowth$supp == "VC" & CToothGrowth$dose == 0.5, "len"], alternative = "greater")
x <- CToothGrowth[CToothGrowth$supp == "VC" & CToothGrowth$dose == 1.0, "len"]
y <- CToothGrowth[CToothGrowth$supp == "VC" & CToothGrowth$dose == 0.5, "len"]
t.test(CToothGrowth[CToothGrowth$supp == "VC" & CToothGrowth$dose == 1.0, "len"], CToothGrowth[CToothGrowth$supp == "VC" & CToothGrowth$dose == 0.5, "len"])
sd(x)
sd(y)
mean9x)
mean(x)
mean(y)
var(x)
var(y)
length(x)
((var(x)/length(x) + var(y)/lenght(y))^2
)
((var(x)/len(x) + var(y)/len(y))^2
)
var(x)/length(x)
(var(x)/length(x) + var(y)/length(y))^2
(var(x)/length(x) + var(y)/length(y))^2/((var(x)/length(x))^2/(length(x)-1)+(var(y)/length(y))^2/(length(y)-1)
)
?qt(17.86)
qt(17.86)
qt(df=17.86)
dt(df=17.86)
dt(17.86)
?dt
dt(.95, 17.86)
qt(.95, 8, lower.tail = TRUE)
qt(.95, 17.85, lower.tail = FALSE)
dt(0.95, 17.86)
qnorm(0.95, 8)
qnorm(.95, 17.862)
qt(0.96, 17.862)
var(x)
var(y)
?t.test
t.test(x,y, alternative="greater")
t.test(x,y, alternative="less")
t.test(x,y, alternative="greater")
t.test(x,y)
t.test(x,y, alternatives = "greater")
x <- z
z <- null
z = 0
z <- x
y <- x
x <- z
x
y
mean(x)
mean(y)
x <- CToothGrowth[CToothGrowth$supp == "VC" & CToothGrowth$dose == 0.5, "len"]
mean(x)
qt(.95, 17.862)
t.test(x,y, var.equal = FALSE)
t.test(x,y, var.equal = FALSE, alternative = greater)
t.test(x,y, var.equal = FALSE, alternative = "greater")
t.test(x,y, var.equal = FALSE, alternative = "less")
t.test(x,y, var.equal = FALSE, alternative = "less")
ToothGrowth$supp
?paste
paste0(ToothGrowth$Combined)
paste0(CToothGrowth$combined)
paste0(CToothGrowth$combined, collapse = " ")
substring(CToothGrowth$combined)
?substring
unique(CToothGrowth$supp)
unique(CToothGrowth$supp)[1]
unique(CToothGrowth$supp)[2]
x <- CToothGrowth[CToothGrowth$supp == "VC" & CToothGrowth$dose == 0.5, "len"]
y <- CToothGrowth[CToothGrowth$supp == "VC" & CToothGrowth$dose == 1.0, "len"]
t.test(x,y, var.equal=FALSE)$Pvalue
t.test(x,y, var.equal=FALSE)
x <- CToothGrowth[CToothGrowth$supp == "VC" & CToothGrowth$dose == 0.5, "len"]
y <- CToothGrowth[CToothGrowth$supp == "VC" & CToothGrowth$dose == 1.0, "len"]
>>>>>>> 7ce2b0f542318c4c9c95bb27dbcfb9d025b59698
t.test(x,y, var.equal=FALSE)$p-value
x <- CToothGrowth[CToothGrowth$supp == "VC" & CToothGrowth$dose == 0.5, "len"]
y <- CToothGrowth[CToothGrowth$supp == "VC" & CToothGrowth$dose == 1.0, "len"]
t.test(x,y, var.equal=FALSE)$pvalue
x <- CToothGrowth[CToothGrowth$supp == "VC" & CToothGrowth$dose == 0.5, "len"]
y <- CToothGrowth[CToothGrowth$supp == "VC" & CToothGrowth$dose == 1.0, "len"]
t.test(x,y, var.equal=FALSE)$p
x <- CToothGrowth[CToothGrowth$supp == "VC" & CToothGrowth$dose == 0.5, "len"]
y <- CToothGrowth[CToothGrowth$supp == "VC" & CToothGrowth$dose == 1.0, "len"]
t.test(x,y, var.equal=FALSE)$p.vale
x <- CToothGrowth[CToothGrowth$supp == "VC" & CToothGrowth$dose == 0.5, "len"]
y <- CToothGrowth[CToothGrowth$supp == "VC" & CToothGrowth$dose == 1.0, "len"]
t.test(x,y, var.equal=FALSE)$padsf
t.test(x,y,var.equal=FALSE)$p.value
t.test(x,y, var.equal=FALSE)
?ToothGrowth
?order
order(CToothGrowth[2])
CToothGrowth[order(CToothGrowth[2])}
CToothGrowth[order(CToothGrowth[2])]
CToothGrowth[order(CToothGrowth[2]),]
CToothGrowth[order(CToothGrowth[4]),]
CToothGrowth[order(CToothGrowth[3], CToothGrowth[4]),]
CToothGrowth[order(CToothGrowth[4], CToothGrowth[3]),]
data(ToothGrowth)
CToothGrowth <- data.frame(combined = paste(ToothGrowth$supp, ToothGrowth$dose), ToothGrowth)
CToothGrowth <- CToothGrowth[order(CToothGrowth[4], CToothGrowth[3]),]
plot(CToothGrowth$combined, CToothGrowth$len)
?t.test
x <- CToothGrowth[CToothGrowth$supp == "VC" & CToothGrowth$dose == 0.5, "len"]
y <- CToothGrowth[CToothGrowth$supp == "VC" & CToothGrowth$dose == 1.0, "len"]
t.test(x,y,paired=FALSE, var.equal=FALSE)
VC05 <- ToothGrowth[ToothGrowth$supp == "VC" & ToothGrowth$dose == 0.5, "len"]
OJ05 <- ToothGrowth[ToothGrowth$supp == "OJ" & ToothGrowth$dose == 0.5, "len"]
t.test(x,y,paired=FALSE, var.equal=FALSE)
VC05 <- ToothGrowth[ToothGrowth$supp == "VC" & ToothGrowth$dose == 0.5, "len"]
OJ05 <- ToothGrowth[ToothGrowth$supp == "OJ" & ToothGrowth$dose == 0.5, "len"]
t.test(VC05,OJ05,paired=FALSE, var.equal=FALSE)
VC10 <- ToothGrowth[ToothGrowth$supp == "VC" & ToothGrowth$dose == 1.0, "len"]
OJ10 <- ToothGrowth[ToothGrowth$supp == "OJ" & ToothGrowth$dose == 1.0, "len"]
t.test(VC10,OJ10,paired=FALSE, var.equal=FALSE)
VC20 <- ToothGrowth[ToothGrowth$supp == "VC" & ToothGrowth$dose == 2.0, "len"]
OJ20 <- ToothGrowth[ToothGrowth$supp == "OJ" & ToothGrowth$dose == 2.0, "len"]
t.test(VC10,OJ10,paired=FALSE, var.equal=FALSE)
t.test(VC20,OJ20,paired=FALSE, var.equal=FALSE)
summarydata <- matrix(nrow=6, ncol=3)
row.names(summarydata) = CToothGrowth$combined
CToothGrowth <- CToothGrowth[order(CToothGrowth[4], CToothGrowth[3]),]
CToothGrowth <- data.frame(combined = paste(ToothGrowth$supp, ToothGrowth$dose), ToothGrowth)
CToothGrowth <- CToothGrowth[order(CToothGrowth[4], CToothGrowth[3]),]
CToothGrowth$combined
unique(CToothGrowth$combined)
unique(CToothGrowth$combined)
CToothGrowth$combined$Levels
attr(CToothGrowth$combined, "Levels")
?attr
attr(CToothGrowth$combined, levels)
attr(CToothGrowth$combined, "levels")
row.names(summarydata) = attr(CToothGrowth$combined, "levels")
summarydata
summarydata[1]
summarydata[,1]
summarydata <- matrix(nrow=6, ncol=0)
row.names(summarydata) = attr(CToothGrowth$combined, "levels")
?cbind
?mean
```{r}
t.test(VC10, VC20, paired=FALSE, var.equal=FALSE)
```
```{r}
t.test(OJ05, OJ10, paired=FALSE, var.equal=FALSE)
```
t.test(OJ10, OJ20, paired=FALSE, var.equal=FALSE)
testsubject <- read.table("./3_Getting_Data/Course_Project/UCI HAR Dataset/test/subject_test.txt")
testdata <- read.table("./3_Getting_Data/Course_Project/UCI HAR Dataset/test/X_test.txt")
testlabel <- read.table("./3_Getting_Data/Course_Project/UCI HAR Dataset/test/Y_test.txt")
combinedtest <- cbind(subject = testsubject, data = testdata, label = testlabel, group = "test")
trainsubject <- read.table("./3_Getting_Data/Course_Project/UCI HAR Dataset/train/subject_train.txt")
traindata <- read.table("./3_Getting_Data/Course_Project/UCI HAR Dataset/train/X_train.txt")
trainlabel <- read.table("./3_Getting_Data/Course_Project/UCI HAR Dataset/train/Y_train.txt")
combinedtrain <- cbind(subject = trainsubject, data = traindata, label = trainlabel, group = "train")
data <- rbind(combinedtrain, combinedtest)
names(data)[1] = "subject"
names(data)
dim(data)
names(data)[563] = "label"
library(dplyr)
?rename
source('~/Dropbox/datasciencecoursera/3_Getting_Data/Course_Project/run_analysis.R')
source('~/Dropbox/datasciencecoursera/3_Getting_Data/Course_Project/run_analysis.R')
colnames <- read.table("./3_Getting_Data/Course_Project/UCI HAR Dataset/features.txt")
head(colnames)
?read.table
colnames <- read.table("./3_Getting_Data/Course_Project/UCI HAR Dataset/features.txt")[2]
colnames
dim(data)
colnames(Data)
colnames(data)
colnames(data)[2:562] = colnames
names(data)
colnames
colnames(data)[2:562] <- colnames
colnames
data
testsubject <- read.table("./3_Getting_Data/Course_Project/UCI HAR Dataset/test/subject_test.txt")
testdata <- read.table("./3_Getting_Data/Course_Project/UCI HAR Dataset/test/X_test.txt")
testlabel <- read.table("./3_Getting_Data/Course_Project/UCI HAR Dataset/test/Y_test.txt")
combinedtest <- cbind(subject = testsubject, data = testdata, label = testlabel, group = "test")
trainsubject <- read.table("./3_Getting_Data/Course_Project/UCI HAR Dataset/train/subject_train.txt")
traindata <- read.table("./3_Getting_Data/Course_Project/UCI HAR Dataset/train/X_train.txt")
trainlabel <- read.table("./3_Getting_Data/Course_Project/UCI HAR Dataset/train/Y_train.txt")
combinedtrain <- cbind(subject = trainsubject, data = traindata, label = trainlabel, group = "train")
data <- rbind(combinedtrain, combinedtest)
names(data)[1] = "subject"
names(data)[563] = "label"
colnames <- as.character(read.table("./3_Getting_Data/Course_Project/UCI HAR Dataset/features.txt")[2])
colnames
colnames <- as.character(read.table("./3_Getting_Data/Course_Project/UCI HAR Dataset/features.txt")[2])
colnames
head(colnames)
names(Data)
names(data)
colnames <- read.table("./3_Getting_Data/Course_Project/UCI HAR Dataset/features.txt")
colnames
colnm <- read.table("./3_Getting_Data/Course_Project/UCI HAR Dataset/features.txt")[2]
colnm
?as.character
colnm <- as.character(read.table("./3_Getting_Data/Course_Project/UCI HAR Dataset/features.txt")[2])
colnm
colnm <- read.table("./3_Getting_Data/Course_Project/UCI HAR Dataset/features.txt")[2]
colnm <- read.table("./3_Getting_Data/Course_Project/UCI HAR Dataset/features.txt")[,2]
colnm
colnm <- as.character(read.table("./3_Getting_Data/Course_Project/UCI HAR Dataset/features.txt")[,2])
colnm
names(data)
datanm <- c("subject", colnm, "label", "group")
datanm
names(data) <- datanm
names(data)
testsubject <- read.table("./3_Getting_Data/Course_Project/UCI HAR Dataset/test/subject_test.txt")
testdata <- read.table("./3_Getting_Data/Course_Project/UCI HAR Dataset/test/X_test.txt")
testlabel <- read.table("./3_Getting_Data/Course_Project/UCI HAR Dataset/test/Y_test.txt")
combinedtest <- cbind(subject = testsubject, label = testlabel, group = "test", data = traindata)
trainsubject <- read.table("./3_Getting_Data/Course_Project/UCI HAR Dataset/train/subject_train.txt")
traindata <- read.table("./3_Getting_Data/Course_Project/UCI HAR Dataset/train/X_train.txt")
trainlabel <- read.table("./3_Getting_Data/Course_Project/UCI HAR Dataset/train/Y_train.txt")
combinedtrain <- cbind(subject = trainsubject, label = trainlabel, group = "train", data = traindata)
data <- rbind(combinedtrain, combinedtest)
##2. Extracts only the measurements on the mean and standard deviation for each measurement.
colnm <- as.character(read.table("./3_Getting_Data/Course_Project/UCI HAR Dataset/features.txt")[,2])
datanm <- c("subject",  "label", "group", colnm)
names(data) <- datanm
head(data)
select(data, contains("mean()", "std()"))
?select
test <- select(data, contains("mean()")
)
?make.names
make.names(names(data), unique=TRUE)
names(data) <- make.names(names(data), unique=TRUE)
?select
test <- select(data, contains("mean"))
head(test)
names(data)
test <- select(data, contains("mean.."))
head(test)
names(test)
test <- select(data, contains("mean..", ignore.case=FALSE))
names(test)
sddf <- select(data, contains("sd..", ignore.case=FALSE))
sddf
names(data)
sddf <- select(data, contains("std..", ignore.case=FALSE))
head(sddf)
names(sddf)
meandf <- select(data, contains("mean..", ignore.case=FALSE))
test <- cbind(data[1:3], meandf, sddf)
head(test)
names(test)
?gsub
?fread
?cast
head(test)
actlabels <- read.table("./3_Getting_Data/Course_Project/UCI HAR Dataset/activity_labels.txt")
actlabels
sample = data.frame(1:6)
sample
sample[1]
sample$1 == actlabels[0]
?within
?revalue
?transmute
names(Data)
names(data)
names(test)
head(data2)
data2 <- cbind(data[1:3], meandf, sddf)
head(data2)
names(data2)
data2$labels
data2$label
?factor
data2 %>% select(label)
data2 %>% select(label) %>% .$label
?mutate
data3 <- mutate(data2, label = actlabels[label])
head(data2[label])
head(data2[lable])
names(Data2)
names(data2)
head(data2[label])
data2$label
data2[label,]
data2["label"]
data3 <- mutate(data2, label = actlabels[label])
data3 <- mutate(data2, labelname = actlabels[label])
data3 <- mutate(data2, labelname = actlabels[1])
head(actlabels)
data3 <- mutate(data2, labelname = actlabels[2][1])
actlabels[2][1]
actlabels[actlabels$V1 == 1,2]
data3 <- mutate(data2, labelname = actlabels[actlabels$V1 == 1,2])
head(data3)
data3 <- mutate(data2, labelname = actlabels[actlabels$V1 == label,2])
head(data3)
data4 <- mutate(data2, labelname = actlabels[actlabels$V1 == label,2])
?subset
subset(data2, label = 1)
?with
?match
actlabels
names(actlabels) = c("id", "activity")
actlabels
actlabels[match(data2$label, actlabels$id), 2, drop=F]
?name
data2$label <- with(actlabels, name[match(data2$label, id)])
data2$label <- with(actlabels, activity[match(data2$label, id)])
head(data2)
rename(data2, label = activity)
?rename
rename(data2, activity = label)
data3 <- rename(data2, activity = label)
names(data3)
?gsub
data3 <- data2
gsub("...",".", names(data3), fixed = TRUE)
names(data3) <- gsub("...",".", names(data3), fixed = TRUE)
finaldata <- gsub("...",".", names(data2), fixed = TRUE)
finaldata <- gsub("..","", names(finaldata), fixed = TRUE)
finaldata
names(finaldata)
finaldata<-data2
finaldata <- gsub("...",".", names(data2), fixed = TRUE)
finaldata <- gsub("..","", names(finaldata), fixed = TRUE)
names(finaldata)
names(finaldata) <- gsub("...",".", names(data2), fixed = TRUE)
names(finaldata) <- gsub("..","", names(finaldata), fixed = TRUE)
finaldata<-data2
names(finaldata) <- gsub("...",".", names(data2), fixed = TRUE)
names(finaldata) <- gsub("..","", names(finaldata), fixed = TRUE)
names(finaldata)
?group.by
?group_by
finaldata <- rename(finaldata, activity = label)
groupdata <- group_by(finaldata, subject, activity, group)
head(groupdata)
?summarize
names(finaldata)
?gsub
summarize(groupdata)
?summarize.each
?summarise.each
?summarize_each
?summarise_each
tidydata <- summarise_each(groupdata, funs=mean)
tidydata <- summarise_each(groupdata, funs(mean)
)
head(tidydata)
names(finaldata)
?sub
##5. From the data set in step 4, creates a second, independent tidy data set with the average
##Getting Data Course Project
##
##Author: Scott Lin
##Purpose of this script is to make a tidy dataset from the Samsung wearable computing dataset.
##I will be breaking up this into the five questions.
library(dplyr)
##1. Merges the training and the test sets to create one data set.
#First thing here is to load the datasets
testsubject <- read.table("./3_Getting_Data/Course_Project/UCI HAR Dataset/test/subject_test.txt")
testdata <- read.table("./3_Getting_Data/Course_Project/UCI HAR Dataset/test/X_test.txt")
testlabel <- read.table("./3_Getting_Data/Course_Project/UCI HAR Dataset/test/Y_test.txt")
combinedtest <- cbind(subject = testsubject, label = testlabel, group = "test", data = traindata)
trainsubject <- read.table("./3_Getting_Data/Course_Project/UCI HAR Dataset/train/subject_train.txt")
traindata <- read.table("./3_Getting_Data/Course_Project/UCI HAR Dataset/train/X_train.txt")
trainlabel <- read.table("./3_Getting_Data/Course_Project/UCI HAR Dataset/train/Y_train.txt")
combinedtrain <- cbind(subject = trainsubject, label = trainlabel, group = "train", data = traindata)
data <- rbind(combinedtrain, combinedtest)
##2. Extracts only the measurements on the mean and standard deviation for each measurement.
colnm <- as.character(read.table("./3_Getting_Data/Course_Project/UCI HAR Dataset/features.txt")[,2])
datanm <- c("subject",  "label", "group", colnm)
names(data) <- datanm
#Make sure there are unique datanames
names(data) <- make.names(names(data), unique=TRUE)
#Select columns of means and sd, must end with mean and std and not have it in the name
meandf <- select(data, contains("mean..", ignore.case=FALSE))
sddf <- select(data, contains("std..", ignore.case=FALSE))
#Remake the data dataframe
data2 <- cbind(data[1:3], meandf, sddf)
##3. Uses descriptive activity names to name the activities in the data set
actlabels <- read.table("./3_Getting_Data/Course_Project/UCI HAR Dataset/activity_labels.txt")
names(actlabels) = c("id", "activity")
data2$label <- with(actlabels, activity[match(data2$label, id)]) ##replaces label
data2 <- rename(data2, activity = label)
##4. Appropriately labels the data set with descriptive variable names.
#final manipulation, renaming to finaldata
finaldata<-data2
#Remove weird periods
names(finaldata) <- gsub("...",".", names(data2), fixed = TRUE)
names(finaldata) <- gsub("..","", names(finaldata), fixed = TRUE)
#Previous make.names function already removed all parenthesis and dashes so the data is clean.
##5. From the data set in step 4, creates a second, independent tidy data set with the average
##   of each variable for each activity and each subject.
##Group by subject and activity and group
groupdata <- group_by(finaldata, subject, activity, group)
tidydata <- summarise_each(groupdata, funs(mean))
testsubject <- read.table("./3_Getting_Data/Course_Project/UCI HAR Dataset/test/subject_test.txt")
testdata <- read.table("./3_Getting_Data/Course_Project/UCI HAR Dataset/test/X_test.txt")
testlabel <- read.table("./3_Getting_Data/Course_Project/UCI HAR Dataset/test/Y_test.txt")
combinedtest <- cbind(subject = testsubject, label = testlabel, group = "test", data = traindata)
combinedtest <- cbind(subject = testsubject, label = testlabel, group = "test", data = testdata)
trainsubject <- read.table("./3_Getting_Data/Course_Project/UCI HAR Dataset/train/subject_train.txt")
traindata <- read.table("./3_Getting_Data/Course_Project/UCI HAR Dataset/train/X_train.txt")
trainlabel <- read.table("./3_Getting_Data/Course_Project/UCI HAR Dataset/train/Y_train.txt")
combinedtrain <- cbind(subject = trainsubject, label = trainlabel, group = "train", data = traindata)
data <- rbind(combinedtrain, combinedtest)
colnm <- as.character(read.table("./3_Getting_Data/Course_Project/UCI HAR Dataset/features.txt")[,2])
datanm <- c("subject",  "label", "group", colnm)
names(data) <- datanm
names(data) <- make.names(names(data), unique=TRUE)
meandf <- select(data, contains("mean..", ignore.case=FALSE))
sddf <- select(data, contains("std..", ignore.case=FALSE))
data2 <- cbind(data[1:3], meandf, sddf)
actlabels <- read.table("./3_Getting_Data/Course_Project/UCI HAR Dataset/activity_labels.txt")
names(actlabels) = c("id", "activity")
data2$label <- with(actlabels, activity[match(data2$label, id)]) ##replaces label
data3 <- rename(data2, activity = label)
finaldata<-data3
names(finaldata) <- gsub("...",".", names(data2), fixed = TRUE)
names(finaldata) <- gsub("..","", names(finaldata), fixed = TRUE)
groupdata <- group_by(finaldata, subject, activity, group)
tidydata <- summarise_each(groupdata, funs(mean))
head(finaldata)
names(finaldata)
data3 <- rename(data2, activity = label)
finaldata<-data3
names(finaldata)
names(finaldata) <- gsub("...",".", names(data3), fixed = TRUE)
names(finaldata) <- gsub("..","", names(finaldata), fixed = TRUE)
names(finaldata)
groupdata <- group_by(finaldata, subject, activity, group)
tidydata <- summarise_each(groupdata, funs(mean))
?write.table
write.table(tidydata, row.names=FALSE, file = "./3_Getting_Data/Course_Project/tidydata.txt")
dim(tidydata)
names(finaldata)
setwd()
<<<<<<< HEAD
str(tidydata)
summary(tidydata)
?which
swirl()
library(siwrl)
library(swirl)
swirl()
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(cran, package)
by_package
summarize(by_package, mean(size))
?n
?n_distinct
submit()
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts <- filter(pack_sum, count > 679)
top_counts
View(top_counts)
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
filter(pack_sum, unique > 465)
top_unique <- filter(pack_sum, unique > 465)
View(top_unique)
arrange(to_unique, desc(unique))
arrange(top_unique, desc(unique))
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit()
?select
cran %>% select(ip_id, country, package, size) %>% print
submit()
submit()
?mutate
submit()
submit()
submit()
submit()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
res <- gather(students2, sex_class, count, -grade)
res
library(swirl)
swirl()
?separate
separate(res, sex_class, c("sex", "class"))
?gather
studnets2
students2
gather(students2, sex, count, -grade)
submit()
studnets3
students3
studnets3
students3
gather(students3,test, class,class1:class5, -name na.rm = TRUE)
gather(students3,test, class,class1:class5, -name, na.rm = TRUE)
gather(students3,test, grade,class1:class5, -name, na.rm = TRUE)
gather(students3,grade,class1:class5, -name, -test, na.rm = TRUE)
?gather
gather(students3,test, grade,class1:class5, -name, na.rm = TRUE)
gather(students3,test, grade,class1:class5, na.rm = TRUE)
gather(students3,class, grade,class1:class5, na.rm = TRUE)
submit()
?spread
submit()
submit()
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, value) %>%
print
test <- students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE)
test
spread(test, test, value)
spread(test, test, class)
spread(test, test, name)
spread(test, name,test)
spread(test, test, variables)
stocks <- data.frame(
time = as.Date('2009-01-01') + 0:9,
X = rnorm(10, 0, 1),
Y = rnorm(10, 0, 2),
Z = rnorm(10, 0, 4)
)
stocks
stocksm <- stocks %>% gather(stock, price, -time)
stocksm
stocksm %>% spread(stock, price)
submit()
stocksm %>% spread(time, price)
submit()
extract_numeric("class5")
submit()
?mutate
submit()
submit()
student4
student4
students4
submit()
submit()
?unique
submit()
submit()
submit()
passed
failed
passed <- mutate(passed, status = "passed")
failed <- mutate(failed, status = "failed")
?bind_rows
bind_rows(passed, failed)
sat
?separate
submit()
sat %>%
select(-contains("total"))
sat %>%
select(-contains("total")) %>%
gather(subject, score, -score_range) %>%
;adsfkl;
sat %>%
select(-contains("total")) %>%
gather(subject, score, -score_range)
submit()
sat %>%
select(-contains("total")) %>%
gather(subject, score, -score_range)
submit()
submit()
count()
submit()
=======
>>>>>>> 7ce2b0f542318c4c9c95bb27dbcfb9d025b59698
